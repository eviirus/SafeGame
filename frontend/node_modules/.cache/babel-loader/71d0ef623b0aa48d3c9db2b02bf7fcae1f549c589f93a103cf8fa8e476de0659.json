{"ast":null,"code":"import axios from \"axios\";\nexport const handleSubmit = (inputValue, fileName, file, inputType) => {\n  if (inputType === \"text\") {\n    handleTextInput(inputValue);\n  } else if (inputType === \"link\") {\n    handleLinkInput(inputValue);\n  } else if (inputType === \"file\") {\n    handleFileInput(fileName, file);\n  }\n};\nconst handleTextInput = async inputValue => {\n  const receivedFormattedText = await prepareTextInput(inputValue);\n  if (receivedFormattedText !== null) generateResultFromText(receivedFormattedText);\n};\nconst prepareTextInput = async text => {\n  const MIN_INPUT_LENGTH = 1000;\n  if (text.length < MIN_INPUT_LENGTH) {\n    alert(\"Patikrinkite ar įklijavote pilną privatumo politikos tekstą\");\n  } else {\n    try {\n      const formattedText = await axios.post(\"http://localhost:5000/endpoints/processText\", {\n        text: text\n      });\n      return formattedText;\n    } catch (error) {\n      alert(\"Įvyko klaida įkeliant tekstą į serverį\");\n      return null;\n    }\n  }\n};\nconst handleLinkInput = inputValue => {\n  const urlRegex = /^(https?|chrome):\\/\\/[^\\s$.?#].[^\\s]*$/gm;\n  if (urlRegex.test(inputValue)) {\n    console.log(\"Sending link to server\");\n  } else {\n    alert(\"Patikrinkite įvesta nuorodą\");\n  }\n};\nconst handleFileInput = async (fileName, file) => {\n  const fileExtension = fileName.toLowerCase().split(\".\").pop();\n  if (fileExtension !== \"pdf\") {\n    alert(\"Tik .pdf failai yra leidžiami\");\n    return;\n  }\n  const formData = new FormData();\n  formData.append(\"file\", file);\n  const receivedText = await convertFile(formData);\n  if (receivedText !== null) generateResultFromText(receivedText);\n};\nconst convertFile = async formData => {\n  try {\n    const convertedText = await axios.post(\"http://localhost:5000/endpoints/convertFile\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    });\n    return convertedText.data;\n  } catch (error) {\n    if (error.response) {\n      alert(error.response.data.message);\n    } else {\n      alert(\"Įvyko klaida įkeliant failą į serverį\");\n    }\n    return null;\n  }\n};\nconst generateResultFromText = async text => {\n  console.log(text);\n  // try {\n  //   await axios.post(\n  //     \"http://localhost:5000/endpoints/generateResultFromText\",\n  //     text\n  //   );\n  // } catch (error) {\n  //   alert(\"Įvyko klaida generuojant rezultatą\");\n  // }\n};","map":{"version":3,"names":["axios","handleSubmit","inputValue","fileName","file","inputType","handleTextInput","handleLinkInput","handleFileInput","receivedFormattedText","prepareTextInput","generateResultFromText","text","MIN_INPUT_LENGTH","length","alert","formattedText","post","error","urlRegex","test","console","log","fileExtension","toLowerCase","split","pop","formData","FormData","append","receivedText","convertFile","convertedText","headers","data","response","message"],"sources":["C:/Users/IT/Desktop/ALL/VILNIUS_TECH/3 kursas/2 semestras/PKP/SafeGame/frontend/src/components/input-fields/handleSubmit.jsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport const handleSubmit = (inputValue, fileName, file, inputType) => {\r\n  if (inputType === \"text\") {\r\n    handleTextInput(inputValue);\r\n  } else if (inputType === \"link\") {\r\n    handleLinkInput(inputValue);\r\n  } else if (inputType === \"file\") {\r\n    handleFileInput(fileName, file);\r\n  }\r\n};\r\n\r\nconst handleTextInput = async (inputValue) => {\r\n  const receivedFormattedText = await prepareTextInput(inputValue);\r\n\r\n  if (receivedFormattedText !== null)\r\n    generateResultFromText(receivedFormattedText);\r\n};\r\n\r\nconst prepareTextInput = async (text) => {\r\n  const MIN_INPUT_LENGTH = 1000;\r\n\r\n  if (text.length < MIN_INPUT_LENGTH) {\r\n    alert(\"Patikrinkite ar įklijavote pilną privatumo politikos tekstą\");\r\n  } else {\r\n    try {\r\n      const formattedText = await axios.post(\r\n        \"http://localhost:5000/endpoints/processText\",\r\n        {\r\n          text: text,\r\n        }\r\n      );\r\n\r\n      return formattedText;\r\n    } catch (error) {\r\n      alert(\"Įvyko klaida įkeliant tekstą į serverį\");\r\n\r\n      return null;\r\n    }\r\n  }\r\n};\r\n\r\nconst handleLinkInput = (inputValue) => {\r\n  const urlRegex = /^(https?|chrome):\\/\\/[^\\s$.?#].[^\\s]*$/gm;\r\n\r\n  if (urlRegex.test(inputValue)) {\r\n    console.log(\"Sending link to server\");\r\n  } else {\r\n    alert(\"Patikrinkite įvesta nuorodą\");\r\n  }\r\n};\r\n\r\nconst handleFileInput = async (fileName, file) => {\r\n  const fileExtension = fileName.toLowerCase().split(\".\").pop();\r\n\r\n  if (fileExtension !== \"pdf\") {\r\n    alert(\"Tik .pdf failai yra leidžiami\");\r\n    return;\r\n  }\r\n\r\n  const formData = new FormData();\r\n  formData.append(\"file\", file);\r\n\r\n  const receivedText = await convertFile(formData);\r\n\r\n  if (receivedText !== null) generateResultFromText(receivedText);\r\n};\r\n\r\nconst convertFile = async (formData) => {\r\n  try {\r\n    const convertedText = await axios.post(\r\n      \"http://localhost:5000/endpoints/convertFile\",\r\n      formData,\r\n      {\r\n        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n      }\r\n    );\r\n\r\n    return convertedText.data;\r\n  } catch (error) {\r\n    if (error.response) {\r\n      alert(error.response.data.message);\r\n    } else {\r\n      alert(\"Įvyko klaida įkeliant failą į serverį\");\r\n    }\r\n\r\n    return null;\r\n  }\r\n};\r\n\r\nconst generateResultFromText = async (text) => {\r\n  console.log(text);\r\n  // try {\r\n  //   await axios.post(\r\n  //     \"http://localhost:5000/endpoints/generateResultFromText\",\r\n  //     text\r\n  //   );\r\n  // } catch (error) {\r\n  //   alert(\"Įvyko klaida generuojant rezultatą\");\r\n  // }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,YAAY,GAAGA,CAACC,UAAU,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,SAAS,KAAK;EACrE,IAAIA,SAAS,KAAK,MAAM,EAAE;IACxBC,eAAe,CAACJ,UAAU,CAAC;EAC7B,CAAC,MAAM,IAAIG,SAAS,KAAK,MAAM,EAAE;IAC/BE,eAAe,CAACL,UAAU,CAAC;EAC7B,CAAC,MAAM,IAAIG,SAAS,KAAK,MAAM,EAAE;IAC/BG,eAAe,CAACL,QAAQ,EAAEC,IAAI,CAAC;EACjC;AACF,CAAC;AAED,MAAME,eAAe,GAAG,MAAOJ,UAAU,IAAK;EAC5C,MAAMO,qBAAqB,GAAG,MAAMC,gBAAgB,CAACR,UAAU,CAAC;EAEhE,IAAIO,qBAAqB,KAAK,IAAI,EAChCE,sBAAsB,CAACF,qBAAqB,CAAC;AACjD,CAAC;AAED,MAAMC,gBAAgB,GAAG,MAAOE,IAAI,IAAK;EACvC,MAAMC,gBAAgB,GAAG,IAAI;EAE7B,IAAID,IAAI,CAACE,MAAM,GAAGD,gBAAgB,EAAE;IAClCE,KAAK,CAAC,6DAA6D,CAAC;EACtE,CAAC,MAAM;IACL,IAAI;MACF,MAAMC,aAAa,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CACpC,6CAA6C,EAC7C;QACEL,IAAI,EAAEA;MACR,CACF,CAAC;MAED,OAAOI,aAAa;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdH,KAAK,CAAC,wCAAwC,CAAC;MAE/C,OAAO,IAAI;IACb;EACF;AACF,CAAC;AAED,MAAMR,eAAe,GAAIL,UAAU,IAAK;EACtC,MAAMiB,QAAQ,GAAG,0CAA0C;EAE3D,IAAIA,QAAQ,CAACC,IAAI,CAAClB,UAAU,CAAC,EAAE;IAC7BmB,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACvC,CAAC,MAAM;IACLP,KAAK,CAAC,6BAA6B,CAAC;EACtC;AACF,CAAC;AAED,MAAMP,eAAe,GAAG,MAAAA,CAAOL,QAAQ,EAAEC,IAAI,KAAK;EAChD,MAAMmB,aAAa,GAAGpB,QAAQ,CAACqB,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC;EAE7D,IAAIH,aAAa,KAAK,KAAK,EAAE;IAC3BR,KAAK,CAAC,+BAA+B,CAAC;IACtC;EACF;EAEA,MAAMY,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEzB,IAAI,CAAC;EAE7B,MAAM0B,YAAY,GAAG,MAAMC,WAAW,CAACJ,QAAQ,CAAC;EAEhD,IAAIG,YAAY,KAAK,IAAI,EAAEnB,sBAAsB,CAACmB,YAAY,CAAC;AACjE,CAAC;AAED,MAAMC,WAAW,GAAG,MAAOJ,QAAQ,IAAK;EACtC,IAAI;IACF,MAAMK,aAAa,GAAG,MAAMhC,KAAK,CAACiB,IAAI,CACpC,6CAA6C,EAC7CU,QAAQ,EACR;MACEM,OAAO,EAAE;QAAE,cAAc,EAAE;MAAsB;IACnD,CACF,CAAC;IAED,OAAOD,aAAa,CAACE,IAAI;EAC3B,CAAC,CAAC,OAAOhB,KAAK,EAAE;IACd,IAAIA,KAAK,CAACiB,QAAQ,EAAE;MAClBpB,KAAK,CAACG,KAAK,CAACiB,QAAQ,CAACD,IAAI,CAACE,OAAO,CAAC;IACpC,CAAC,MAAM;MACLrB,KAAK,CAAC,uCAAuC,CAAC;IAChD;IAEA,OAAO,IAAI;EACb;AACF,CAAC;AAED,MAAMJ,sBAAsB,GAAG,MAAOC,IAAI,IAAK;EAC7CS,OAAO,CAACC,GAAG,CAACV,IAAI,CAAC;EACjB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}