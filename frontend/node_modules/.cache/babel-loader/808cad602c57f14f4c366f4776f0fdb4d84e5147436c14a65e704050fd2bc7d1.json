{"ast":null,"code":"import axios from \"axios\";\nexport const handleSubmit = (inputValue, fileName, file, inputType) => {\n  console.log(\"form submitted with input:\", inputValue, \"file:\", fileName);\n  console.log(inputType);\n  if (inputType === \"text\") {\n    handleTextInput(inputValue);\n  } else if (inputType === \"link\") {\n    handleLinkInput(inputValue);\n  } else if (inputType === \"file\") {\n    handleFileInput(fileName, file);\n  }\n};\nconst handleTextInput = async inputValue => {\n  const MIN_INPUT_LENGTH = 1000;\n  if (inputValue.length < MIN_INPUT_LENGTH) {\n    alert(\"Patikrinkite ar įklijavote pilną privatumo politikos tekstą\");\n  } else {\n    try {\n      await axios.post(\"http://localhost:5000/endpoints/processText\", {\n        text: inputValue\n      });\n      console.log(\"Text successfully sent to the server\");\n    } catch (error) {\n      console.error(\"Error uploading text:\", error);\n      alert(\"Įvyko klaida įkeliant tekstą į serverį\");\n    }\n  }\n};\nconst handleLinkInput = inputValue => {\n  const urlRegex = /^(https?|chrome):\\/\\/[^\\s$.?#].[^\\s]*$/gm;\n  if (urlRegex.test(inputValue)) {\n    console.log(\"Sending link to server\");\n  } else {\n    alert(\"Patikrinkite įvesta nuorodą\");\n  }\n};\nconst handleFileInput = async (fileName, file) => {\n  const fileExtension = fileName.toLowerCase().split(\".\").pop();\n  if (fileExtension === \"pdf\") {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    try {\n      await axios.post(\"http://localhost:5000/endpoints/convertFile\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n    } catch (error) {\n      alert(\"Įvyko klaida įkeliant failą į serverį\");\n    }\n  } else {\n    alert(\"Tik .pdf failai yra leidžiami\");\n  }\n};","map":{"version":3,"names":["axios","handleSubmit","inputValue","fileName","file","inputType","console","log","handleTextInput","handleLinkInput","handleFileInput","MIN_INPUT_LENGTH","length","alert","post","text","error","urlRegex","test","fileExtension","toLowerCase","split","pop","formData","FormData","append","headers"],"sources":["C:/Users/IT/Desktop/ALL/VILNIUS_TECH/3 kursas/2 semestras/PKP/SafeGame/frontend/src/components/input-fields/handleSubmit.jsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport const handleSubmit = (inputValue, fileName, file, inputType) => {\r\n  console.log(\"form submitted with input:\", inputValue, \"file:\", fileName);\r\n  console.log(inputType);\r\n\r\n  if (inputType === \"text\") {\r\n    handleTextInput(inputValue);\r\n  } else if (inputType === \"link\") {\r\n    handleLinkInput(inputValue);\r\n  } else if (inputType === \"file\") {\r\n    handleFileInput(fileName, file);\r\n  }\r\n};\r\n\r\nconst handleTextInput = async (inputValue) => {\r\n  const MIN_INPUT_LENGTH = 1000;\r\n\r\n  if (inputValue.length < MIN_INPUT_LENGTH) {\r\n    alert(\"Patikrinkite ar įklijavote pilną privatumo politikos tekstą\");\r\n  } else {\r\n    try {\r\n      await axios.post(\"http://localhost:5000/endpoints/processText\", {\r\n        text: inputValue,\r\n      });\r\n      console.log(\"Text successfully sent to the server\");\r\n    } catch (error) {\r\n      console.error(\"Error uploading text:\", error);\r\n      alert(\"Įvyko klaida įkeliant tekstą į serverį\");\r\n    }\r\n  }\r\n};\r\n\r\nconst handleLinkInput = (inputValue) => {\r\n  const urlRegex = /^(https?|chrome):\\/\\/[^\\s$.?#].[^\\s]*$/gm;\r\n\r\n  if (urlRegex.test(inputValue)) {\r\n    console.log(\"Sending link to server\");\r\n  } else {\r\n    alert(\"Patikrinkite įvesta nuorodą\");\r\n  }\r\n};\r\n\r\nconst handleFileInput = async (fileName, file) => {\r\n  const fileExtension = fileName.toLowerCase().split(\".\").pop();\r\n\r\n  if (fileExtension === \"pdf\") {\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n\r\n    try {\r\n      await axios.post(\r\n        \"http://localhost:5000/endpoints/convertFile\",\r\n        formData,\r\n        {\r\n          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n        }\r\n      );\r\n    } catch (error) {\r\n      alert(\"Įvyko klaida įkeliant failą į serverį\");\r\n    }\r\n  } else {\r\n    alert(\"Tik .pdf failai yra leidžiami\");\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,YAAY,GAAGA,CAACC,UAAU,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,SAAS,KAAK;EACrEC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEL,UAAU,EAAE,OAAO,EAAEC,QAAQ,CAAC;EACxEG,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;EAEtB,IAAIA,SAAS,KAAK,MAAM,EAAE;IACxBG,eAAe,CAACN,UAAU,CAAC;EAC7B,CAAC,MAAM,IAAIG,SAAS,KAAK,MAAM,EAAE;IAC/BI,eAAe,CAACP,UAAU,CAAC;EAC7B,CAAC,MAAM,IAAIG,SAAS,KAAK,MAAM,EAAE;IAC/BK,eAAe,CAACP,QAAQ,EAAEC,IAAI,CAAC;EACjC;AACF,CAAC;AAED,MAAMI,eAAe,GAAG,MAAON,UAAU,IAAK;EAC5C,MAAMS,gBAAgB,GAAG,IAAI;EAE7B,IAAIT,UAAU,CAACU,MAAM,GAAGD,gBAAgB,EAAE;IACxCE,KAAK,CAAC,6DAA6D,CAAC;EACtE,CAAC,MAAM;IACL,IAAI;MACF,MAAMb,KAAK,CAACc,IAAI,CAAC,6CAA6C,EAAE;QAC9DC,IAAI,EAAEb;MACR,CAAC,CAAC;MACFI,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;IACrD,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdV,OAAO,CAACU,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7CH,KAAK,CAAC,wCAAwC,CAAC;IACjD;EACF;AACF,CAAC;AAED,MAAMJ,eAAe,GAAIP,UAAU,IAAK;EACtC,MAAMe,QAAQ,GAAG,0CAA0C;EAE3D,IAAIA,QAAQ,CAACC,IAAI,CAAChB,UAAU,CAAC,EAAE;IAC7BI,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACvC,CAAC,MAAM;IACLM,KAAK,CAAC,6BAA6B,CAAC;EACtC;AACF,CAAC;AAED,MAAMH,eAAe,GAAG,MAAAA,CAAOP,QAAQ,EAAEC,IAAI,KAAK;EAChD,MAAMe,aAAa,GAAGhB,QAAQ,CAACiB,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC;EAE7D,IAAIH,aAAa,KAAK,KAAK,EAAE;IAC3B,MAAMI,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAErB,IAAI,CAAC;IAE7B,IAAI;MACF,MAAMJ,KAAK,CAACc,IAAI,CACd,6CAA6C,EAC7CS,QAAQ,EACR;QACEG,OAAO,EAAE;UAAE,cAAc,EAAE;QAAsB;MACnD,CACF,CAAC;IACH,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdH,KAAK,CAAC,uCAAuC,CAAC;IAChD;EACF,CAAC,MAAM;IACLA,KAAK,CAAC,+BAA+B,CAAC;EACxC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}