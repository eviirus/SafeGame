{"ast":null,"code":"const handleSubmit = async e => {\n  e.preventDefault();\n\n  // Validate inputs\n  if (!studentFullName || !grades) {\n    setError(\"Both Name and Grades are required.\");\n    return;\n  }\n\n  // Convert grades from string to array of numbers\n  const gradesArray = grades.split(\",\").map(grade => parseInt(grade.trim(), 10)).filter(grade => !isNaN(grade)); // Ensure it's a valid number\n\n  if (gradesArray.length === 0) {\n    setError(\"Please provide valid grades.\");\n    return;\n  }\n  console.log(\"Submitting data:\", {\n    studentFullName,\n    grades: gradesArray,\n    classId\n  }); // Debugging line\n\n  try {\n    // Send data to backend\n    await axios.post(\"http://localhost:5000/students\", {\n      studentFullName,\n      grades: gradesArray,\n      classId\n    });\n\n    // Refresh students list after adding a new student\n    refreshStudents();\n\n    // Clear form fields\n    setStudentFullName(\"\");\n    setGrades(\"\");\n    setError(\"\");\n  } catch (err) {\n    setError(\"Error adding student.\");\n    console.error(err);\n  }\n};","map":{"version":3,"names":["handleSubmit","e","preventDefault","studentFullName","grades","setError","gradesArray","split","map","grade","parseInt","trim","filter","isNaN","length","console","log","classId","axios","post","refreshStudents","setStudentFullName","setGrades","err","error"],"sources":["C:/Users/IT/Desktop/ALL/Learn/fullstack/client/src/components/StudentForm.jsx"],"sourcesContent":["const handleSubmit = async (e) => {\r\n  e.preventDefault();\r\n\r\n  // Validate inputs\r\n  if (!studentFullName || !grades) {\r\n    setError(\"Both Name and Grades are required.\");\r\n    return;\r\n  }\r\n\r\n  // Convert grades from string to array of numbers\r\n  const gradesArray = grades\r\n    .split(\",\")\r\n    .map((grade) => parseInt(grade.trim(), 10))\r\n    .filter((grade) => !isNaN(grade)); // Ensure it's a valid number\r\n\r\n  if (gradesArray.length === 0) {\r\n    setError(\"Please provide valid grades.\");\r\n    return;\r\n  }\r\n\r\n  console.log(\"Submitting data:\", {\r\n    studentFullName,\r\n    grades: gradesArray,\r\n    classId,\r\n  }); // Debugging line\r\n\r\n  try {\r\n    // Send data to backend\r\n    await axios.post(\"http://localhost:5000/students\", {\r\n      studentFullName,\r\n      grades: gradesArray,\r\n      classId,\r\n    });\r\n\r\n    // Refresh students list after adding a new student\r\n    refreshStudents();\r\n\r\n    // Clear form fields\r\n    setStudentFullName(\"\");\r\n    setGrades(\"\");\r\n    setError(\"\");\r\n  } catch (err) {\r\n    setError(\"Error adding student.\");\r\n    console.error(err);\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,MAAOC,CAAC,IAAK;EAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;;EAElB;EACA,IAAI,CAACC,eAAe,IAAI,CAACC,MAAM,EAAE;IAC/BC,QAAQ,CAAC,oCAAoC,CAAC;IAC9C;EACF;;EAEA;EACA,MAAMC,WAAW,GAAGF,MAAM,CACvBG,KAAK,CAAC,GAAG,CAAC,CACVC,GAAG,CAAEC,KAAK,IAAKC,QAAQ,CAACD,KAAK,CAACE,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAC1CC,MAAM,CAAEH,KAAK,IAAK,CAACI,KAAK,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC;;EAErC,IAAIH,WAAW,CAACQ,MAAM,KAAK,CAAC,EAAE;IAC5BT,QAAQ,CAAC,8BAA8B,CAAC;IACxC;EACF;EAEAU,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE;IAC9Bb,eAAe;IACfC,MAAM,EAAEE,WAAW;IACnBW;EACF,CAAC,CAAC,CAAC,CAAC;;EAEJ,IAAI;IACF;IACA,MAAMC,KAAK,CAACC,IAAI,CAAC,gCAAgC,EAAE;MACjDhB,eAAe;MACfC,MAAM,EAAEE,WAAW;MACnBW;IACF,CAAC,CAAC;;IAEF;IACAG,eAAe,CAAC,CAAC;;IAEjB;IACAC,kBAAkB,CAAC,EAAE,CAAC;IACtBC,SAAS,CAAC,EAAE,CAAC;IACbjB,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC,CAAC,OAAOkB,GAAG,EAAE;IACZlB,QAAQ,CAAC,uBAAuB,CAAC;IACjCU,OAAO,CAACS,KAAK,CAACD,GAAG,CAAC;EACpB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}