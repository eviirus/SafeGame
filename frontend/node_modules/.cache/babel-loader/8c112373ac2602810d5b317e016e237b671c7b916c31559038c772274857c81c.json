{"ast":null,"code":"const handleSubmit = async e => {\n  e.preventDefault();\n  if (!studentFullName || !grades) {\n    setError(\"Both Name and Grades are required.\");\n    return;\n  }\n  const gradesArray = grades.split(\",\").map(grade => parseInt(grade.trim(), 10)).filter(grade => !isNaN(grade));\n  if (gradesArray.length === 0) {\n    setError(\"Please provide valid grades.\");\n    return;\n  }\n  try {\n    const payload = {\n      className,\n      studentFullName,\n      grades: gradesArray,\n      classId\n    };\n    console.log(\"Payload being sent:\", payload); // Debugging line to check values\n\n    const response = await fetch(\"http://localhost:5000/students\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(payload) // Convert payload to JSON string\n    });\n    if (!response.ok) {\n      throw new Error(\"Error adding student.\");\n    }\n    const data = await response.json();\n    console.log(\"Student added:\", data);\n    setStudentFullName(\"\");\n    setGrades(\"\");\n    setError(\"\");\n  } catch (err) {\n    setError(\"Error adding student.\");\n    console.error(err);\n  }\n};","map":{"version":3,"names":["handleSubmit","e","preventDefault","studentFullName","grades","setError","gradesArray","split","map","grade","parseInt","trim","filter","isNaN","length","payload","className","classId","console","log","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","setStudentFullName","setGrades","err","error"],"sources":["C:/Users/IT/Desktop/ALL/Learn/fullstack/client/src/components/StudentForm.jsx"],"sourcesContent":["const handleSubmit = async (e) => {\r\n  e.preventDefault();\r\n\r\n  if (!studentFullName || !grades) {\r\n    setError(\"Both Name and Grades are required.\");\r\n    return;\r\n  }\r\n\r\n  const gradesArray = grades\r\n    .split(\",\")\r\n    .map((grade) => parseInt(grade.trim(), 10))\r\n    .filter((grade) => !isNaN(grade));\r\n\r\n  if (gradesArray.length === 0) {\r\n    setError(\"Please provide valid grades.\");\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const payload = {\r\n      className,\r\n      studentFullName,\r\n      grades: gradesArray,\r\n      classId,\r\n    };\r\n    console.log(\"Payload being sent:\", payload); // Debugging line to check values\r\n\r\n    const response = await fetch(\"http://localhost:5000/students\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(payload), // Convert payload to JSON string\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Error adding student.\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log(\"Student added:\", data);\r\n\r\n    setStudentFullName(\"\");\r\n    setGrades(\"\");\r\n    setError(\"\");\r\n  } catch (err) {\r\n    setError(\"Error adding student.\");\r\n    console.error(err);\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,MAAOC,CAAC,IAAK;EAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;EAElB,IAAI,CAACC,eAAe,IAAI,CAACC,MAAM,EAAE;IAC/BC,QAAQ,CAAC,oCAAoC,CAAC;IAC9C;EACF;EAEA,MAAMC,WAAW,GAAGF,MAAM,CACvBG,KAAK,CAAC,GAAG,CAAC,CACVC,GAAG,CAAEC,KAAK,IAAKC,QAAQ,CAACD,KAAK,CAACE,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAC1CC,MAAM,CAAEH,KAAK,IAAK,CAACI,KAAK,CAACJ,KAAK,CAAC,CAAC;EAEnC,IAAIH,WAAW,CAACQ,MAAM,KAAK,CAAC,EAAE;IAC5BT,QAAQ,CAAC,8BAA8B,CAAC;IACxC;EACF;EAEA,IAAI;IACF,MAAMU,OAAO,GAAG;MACdC,SAAS;MACTb,eAAe;MACfC,MAAM,EAAEE,WAAW;MACnBW;IACF,CAAC;IACDC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEJ,OAAO,CAAC,CAAC,CAAC;;IAE7C,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;MAC7DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACX,OAAO,CAAC,CAAE;IACjC,CAAC,CAAC;IAEF,IAAI,CAACK,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1C;IAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClCZ,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEU,IAAI,CAAC;IAEnCE,kBAAkB,CAAC,EAAE,CAAC;IACtBC,SAAS,CAAC,EAAE,CAAC;IACb3B,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC,CAAC,OAAO4B,GAAG,EAAE;IACZ5B,QAAQ,CAAC,uBAAuB,CAAC;IACjCa,OAAO,CAACgB,KAAK,CAACD,GAAG,CAAC;EACpB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}