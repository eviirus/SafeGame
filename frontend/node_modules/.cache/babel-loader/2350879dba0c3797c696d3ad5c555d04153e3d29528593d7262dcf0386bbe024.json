{"ast":null,"code":"import axios from \"axios\";\nexport const handleSubmit = (inputValue, fileName, inputType) => {\n  console.log(\"form submitted with input:\", inputValue, \"file:\", fileName);\n  console.log(inputType);\n  if (inputType === \"text\") {\n    handleTextInput(inputValue);\n  } else if (inputType === \"link\") {\n    handleLinkInput(inputValue);\n  } else if (inputType === \"file\") {\n    handleFileInput(fileName);\n  }\n};\nconst handleTextInput = inputValue => {\n  const MIN_INPUT_LENGTH = 1000;\n  if (inputValue.length < MIN_INPUT_LENGTH) {\n    alert(\"Patikrinkite ar įklijavote pilną privatumo politikos tekstą\");\n  } else {\n    console.log(\"Sending input to server\");\n  }\n};\nconst handleLinkInput = inputValue => {\n  const urlRegex = /^(https?|chrome):\\/\\/[^\\s$.?#].[^\\s]*$/gm;\n  if (urlRegex.test(inputValue)) {\n    console.log(\"Sending link to server\");\n  } else {\n    alert(\"Patikrinkite įvesta nuorodą\");\n  }\n};\nconst handleFileInput = async fileName => {\n  const fileExtension = fileName.toLowerCase().split(\".\").pop(); // Ensure `file.name`\n\n  if (fileExtension === \"pdf\") {\n    console.log(\"Sending file to server\");\n    const formData = new FormData();\n    formData.append(\"file\", file); // Ensure `file` is a File object\n\n    try {\n      const response = await axios.post(\"/endpoints/fileConvert\",\n      // Match the proxy\n      formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      console.log(\"Server response:\", response.data);\n    } catch (error) {\n      console.error(\"Error uploading file:\", error);\n      alert(\"Įvyko klaida įkeliant failą į serverį\");\n    }\n  } else {\n    alert(\"Tik .pdf failai yra leidžiami\");\n  }\n};","map":{"version":3,"names":["axios","handleSubmit","inputValue","fileName","inputType","console","log","handleTextInput","handleLinkInput","handleFileInput","MIN_INPUT_LENGTH","length","alert","urlRegex","test","fileExtension","toLowerCase","split","pop","formData","FormData","append","file","response","post","headers","data","error"],"sources":["C:/Users/IT/Desktop/ALL/VILNIUS_TECH/3 kursas/2 semestras/PKP/SafeGame/frontend/src/components/input-fields/handleSubmit.jsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport const handleSubmit = (inputValue, fileName, inputType) => {\r\n  console.log(\"form submitted with input:\", inputValue, \"file:\", fileName);\r\n  console.log(inputType);\r\n\r\n  if (inputType === \"text\") {\r\n    handleTextInput(inputValue);\r\n  } else if (inputType === \"link\") {\r\n    handleLinkInput(inputValue);\r\n  } else if (inputType === \"file\") {\r\n    handleFileInput(fileName);\r\n  }\r\n};\r\n\r\nconst handleTextInput = (inputValue) => {\r\n  const MIN_INPUT_LENGTH = 1000;\r\n\r\n  if (inputValue.length < MIN_INPUT_LENGTH) {\r\n    alert(\"Patikrinkite ar įklijavote pilną privatumo politikos tekstą\");\r\n  } else {\r\n    console.log(\"Sending input to server\");\r\n  }\r\n};\r\n\r\nconst handleLinkInput = (inputValue) => {\r\n  const urlRegex = /^(https?|chrome):\\/\\/[^\\s$.?#].[^\\s]*$/gm;\r\n\r\n  if (urlRegex.test(inputValue)) {\r\n    console.log(\"Sending link to server\");\r\n  } else {\r\n    alert(\"Patikrinkite įvesta nuorodą\");\r\n  }\r\n};\r\n\r\nconst handleFileInput = async (fileName) => {\r\n  const fileExtension = fileName.toLowerCase().split(\".\").pop(); // Ensure `file.name`\r\n\r\n  if (fileExtension === \"pdf\") {\r\n    console.log(\"Sending file to server\");\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file); // Ensure `file` is a File object\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        \"/endpoints/fileConvert\", // Match the proxy\r\n        formData,\r\n        {\r\n          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n        }\r\n      );\r\n\r\n      console.log(\"Server response:\", response.data);\r\n    } catch (error) {\r\n      console.error(\"Error uploading file:\", error);\r\n      alert(\"Įvyko klaida įkeliant failą į serverį\");\r\n    }\r\n  } else {\r\n    alert(\"Tik .pdf failai yra leidžiami\");\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,YAAY,GAAGA,CAACC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,KAAK;EAC/DC,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEJ,UAAU,EAAE,OAAO,EAAEC,QAAQ,CAAC;EACxEE,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;EAEtB,IAAIA,SAAS,KAAK,MAAM,EAAE;IACxBG,eAAe,CAACL,UAAU,CAAC;EAC7B,CAAC,MAAM,IAAIE,SAAS,KAAK,MAAM,EAAE;IAC/BI,eAAe,CAACN,UAAU,CAAC;EAC7B,CAAC,MAAM,IAAIE,SAAS,KAAK,MAAM,EAAE;IAC/BK,eAAe,CAACN,QAAQ,CAAC;EAC3B;AACF,CAAC;AAED,MAAMI,eAAe,GAAIL,UAAU,IAAK;EACtC,MAAMQ,gBAAgB,GAAG,IAAI;EAE7B,IAAIR,UAAU,CAACS,MAAM,GAAGD,gBAAgB,EAAE;IACxCE,KAAK,CAAC,6DAA6D,CAAC;EACtE,CAAC,MAAM;IACLP,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EACxC;AACF,CAAC;AAED,MAAME,eAAe,GAAIN,UAAU,IAAK;EACtC,MAAMW,QAAQ,GAAG,0CAA0C;EAE3D,IAAIA,QAAQ,CAACC,IAAI,CAACZ,UAAU,CAAC,EAAE;IAC7BG,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACvC,CAAC,MAAM;IACLM,KAAK,CAAC,6BAA6B,CAAC;EACtC;AACF,CAAC;AAED,MAAMH,eAAe,GAAG,MAAON,QAAQ,IAAK;EAC1C,MAAMY,aAAa,GAAGZ,QAAQ,CAACa,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAAC,CAAC;;EAE/D,IAAIH,aAAa,KAAK,KAAK,EAAE;IAC3BV,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IAErC,MAAMa,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEC,IAAI,CAAC,CAAC,CAAC;;IAE/B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,IAAI,CAC/B,wBAAwB;MAAE;MAC1BL,QAAQ,EACR;QACEM,OAAO,EAAE;UAAE,cAAc,EAAE;QAAsB;MACnD,CACF,CAAC;MAEDpB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEiB,QAAQ,CAACG,IAAI,CAAC;IAChD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdtB,OAAO,CAACsB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7Cf,KAAK,CAAC,uCAAuC,CAAC;IAChD;EACF,CAAC,MAAM;IACLA,KAAK,CAAC,+BAA+B,CAAC;EACxC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}